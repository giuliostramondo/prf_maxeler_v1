/*
    Copyright 2016 Giulio Stramondo

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package prf_complete_v1;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class A_standardKernel extends Kernel {

	private static final DFEType type = dfeInt(32);

	static int p = PRFConstants.p;
	static int q = PRFConstants.q;
	static int M = PRFConstants.M;
	static int N = PRFConstants.N;
	private static final DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(type,p*q);


	protected A_standardKernel(KernelParameters parameters) {
		super(parameters);
		optimization.pushRoundingMode(RoundingMode.TRUNCATE);
		//DFEVar index_i = io.input("x", type);
		// index_j = io.input("y", type);

		DFEVector<DFEVar> AGU_Output = io.input("outAGU",vectorType);
		DFEVar index_i[][] = new DFEVar[p][q];
		DFEVar index_j[][] = new DFEVar[p][q];

		for(int i =0; i<p;i++){
			for(int j=0; j<q ; j++){
				index_i[i][j]= AGU_Output[i*q+j]>>16;
				index_j[i][j]= AGU_Output[i*q+j]&0x0000FFFF;
			}
		}
		DFEVar Addresses[][] = new DFEVar[p][q];

		for(int i =0; i<p;i++){
			for(int j=0; j<q ; j++){
				//Here there could be the need to call a flooring function,
				//the default one (Math.floor) doesn't accept DFEVar as args.
				//Being the DFEVar of the dfeInt(32) type i expect the division
				//to do already the floor.
				Addresses[i][j]= (index_i[i][j]/p) * (M/q) + (index_j[i][j]/q);
			}
		}

		//// TODO replace with your computation
		//DFEVar sum = x + y + a;
		for(int i =0; i<p;i++){
			for(int j=0; j<q ; j++){
				io.output("addr_"+i+"_"+j, Addresses[i][j], type);
			}
		}
	}

}
